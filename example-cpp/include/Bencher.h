// Generated by Haxe 4.0.0-preview.5
#ifndef INCLUDED_Bencher
#define INCLUDED_Bencher

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Bencher)



class HXCPP_CLASS_ATTRIBUTES Bencher_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Bencher_obj OBJ_;
		Bencher_obj();

	public:
		enum { _hx_ClassId = 0x0a1bd519 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Bencher")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Bencher"); }
		static hx::ObjectPtr< Bencher_obj > __new();
		static hx::ObjectPtr< Bencher_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bencher_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bencher",fd,40,67,b2); }

		void intArithmetic(int intMax);
		::Dynamic intArithmetic_dyn();

};


#endif /* INCLUDED_Bencher */ 
