// Generated by Haxe 4.0.0-preview.5
#include <hxcpp.h>

#ifndef INCLUDED_Bencher
#include <Bencher.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09c3155698aa0f91_13_new,"Bencher","new",0xe223a46f,"Bencher.new","Main.hx",13,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_09c3155698aa0f91_14_intArithmetic,"Bencher","intArithmetic",0x841fca48,"Bencher.intArithmetic","Main.hx",14,0x087e5c05)

void Bencher_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_09c3155698aa0f91_13_new)
            	}

Dynamic Bencher_obj::__CreateEmpty() { return new Bencher_obj; }

void *Bencher_obj::_hx_vtable = 0;

Dynamic Bencher_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bencher_obj > _hx_result = new Bencher_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bencher_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a1bd519;
}

void Bencher_obj::intArithmetic(int intMax){
            	HX_STACKFRAME(&_hx_pos_09c3155698aa0f91_14_intArithmetic)
HXLINE(  17)		int intResult = 1;
HXLINE(  19)		int myIterator_min = 0;
HXDLIN(  19)		int myIterator_max = intMax;
HXLINE(  20)		while((myIterator_min < myIterator_max)){
HXLINE(  20)			myIterator_min = (myIterator_min + 1);
HXDLIN(  20)			int i = (myIterator_min - 1);
HXLINE(  21)			intResult = (intResult - i);
HXLINE(  22)			i = (i + 1);
HXLINE(  23)			intResult = (intResult + i);
HXLINE(  24)			i = (i + 1);
HXLINE(  25)			intResult = (intResult * i);
HXLINE(  26)			i = (i + 1);
HXLINE(  27)			intResult = ::Std_obj::_hx_int((( (Float)(intResult) ) / ( (Float)(i) )));
HXLINE(  28)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bencher_obj,intArithmetic,(void))


hx::ObjectPtr< Bencher_obj > Bencher_obj::__new() {
	hx::ObjectPtr< Bencher_obj > __this = new Bencher_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Bencher_obj > Bencher_obj::__alloc(hx::Ctx *_hx_ctx) {
	Bencher_obj *__this = (Bencher_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bencher_obj), false, "Bencher"));
	*(void **)__this = Bencher_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bencher_obj::Bencher_obj()
{
}

hx::Val Bencher_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"intArithmetic") ) { return hx::Val( intArithmetic_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Bencher_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Bencher_obj_sStaticStorageInfo = 0;
#endif

static ::String Bencher_obj_sMemberFields[] = {
	HX_("intArithmetic",79,ad,b6,eb),
	::String(null()) };

hx::Class Bencher_obj::__mClass;

void Bencher_obj::__register()
{
	Bencher_obj _hx_dummy;
	Bencher_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Bencher",fd,40,67,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bencher_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bencher_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bencher_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bencher_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

