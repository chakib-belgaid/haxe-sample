// Generated by Haxe 4.0.0-preview.5
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () { "use strict";
var Main = function() { };
Main.main = function() {
	Main.bench = new Bencher();
	var benchname = process.argv.slice(2)[0];
	var wamrup;
	if(process.argv.slice(2)[1] != null) {
		wamrup = Std.parseInt(process.argv.slice(2)[1]);
	} else {
		wamrup = 5;
	}
	var execution = Std.parseInt(process.argv.slice(2)[2]);
	if(process.argv.slice(2)[2] != null) {
		var tmp = process.argv.slice(2)[2];
	} else {
		execution = 50;
	}
	if(benchname != null) {
		if(benchname == "intArithmetic") {
			Main.__intArithmetic(wamrup,execution);
		} else if(benchname == "doubleArithmetic") {
			Main.__doubleArithmetic(wamrup,execution);
		} else if(benchname == "trig") {
			Main.__trig(wamrup,execution);
		} else {
			console.log("Main.hx:32:","error module not found ");
		}
	} else {
		Main.__intArithmetic(wamrup,execution);
		Main.__doubleArithmetic(wamrup,execution);
		Main.__trig(wamrup,execution);
	}
};
Main.__intArithmetic = function(wamrup,execution) {
	var i = 0;
	console.log("Main.hx:43:","--++beginwarmup");
	while(i < wamrup) {
		Main.bench.intArithmetic(Main.intMax);
		++i;
	}
	i = 0;
	console.log("Main.hx:49:","++--endwarmup");
	while(i < execution) {
		Main.bench.intArithmetic(Main.intMax);
		++i;
	}
};
Main.__doubleArithmetic = function(wamrup,execution) {
	var i = 0;
	console.log("Main.hx:58:","--++beginwarmup");
	while(i < wamrup) {
		Main.bench.doubleArithmetic(Main.floatMin,Main.floatMax);
		++i;
	}
	i = 0;
	console.log("Main.hx:64:","++--endwarmup");
	while(i < execution) {
		Main.bench.doubleArithmetic(Main.floatMin,Main.floatMax);
		++i;
	}
};
Main.__trig = function(wamrup,execution) {
	var i = 0;
	console.log("Main.hx:73:","--++beginwarmup");
	while(i < wamrup) {
		Main.bench.trig(Main.trigMax);
		++i;
	}
	i = 0;
	console.log("Main.hx:79:","++--endwarmup");
	while(i < execution) {
		Main.bench.trig(Main.trigMax);
		++i;
	}
};
var Bencher = function() {
};
Bencher.prototype = {
	intArithmetic: function(intMax) {
		var intResult = 1;
		var myIterator_min = 0;
		var myIterator_max = intMax;
		while(myIterator_min < myIterator_max) {
			var i = myIterator_min++;
			intResult -= i;
			++i;
			intResult += i;
			++i;
			intResult *= i;
			++i;
			intResult = intResult / i | 0;
			++i;
		}
	}
	,doubleArithmetic: function(floatMin,floatMax) {
		var floatResult = floatMin;
		var myIterator_min = floatMin;
		var myIterator_max = floatMax;
		while(myIterator_min < myIterator_max) {
			var i = myIterator_min++;
			floatResult -= i;
			++i;
			floatResult += i;
			++i;
			floatResult *= i;
			++i;
			floatResult /= i;
			++i;
		}
	}
	,trig: function(trigMax) {
		var sine = 0.0;
		var cosine = 0.0;
		var tangent = 0.0;
		var logarithm = 0.0;
		var squareRoot = 0.0;
		var i = 1;
		while(i < trigMax) {
			sine = Math.sin(i);
			cosine = Math.cos(i);
			tangent = Math.tan(i);
			logarithm = Math.log(i);
			squareRoot = Math.sqrt(i);
			++i;
		}
	}
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Main.intMax = 50000000;
Main.floatMin = -25000000;
Main.floatMax = 25000000;
Main.trigMax = 50000;
Main.main();
})();
