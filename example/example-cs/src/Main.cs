// Generated by Haxe 4.0.0-preview.5

#pragma warning disable 109, 114, 219, 429, 168, 162
public class EntryPoint__Main {
	public static void Main() {
		global::cs.Boot.init();
		{
			global::Main.main();
		}
	}
}

public class Main : global::haxe.lang.HxObject {
	
	static Main() {
		unchecked {
			global::Main.intMax = 50000000;
			global::Main.floatMin = -25000000;
			global::Main.floatMax = 25000000;
			global::Main.trigMax = 50000;
		}
	}
	
	
	public Main(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Main() {
		global::Main.__hx_ctor__Main(this);
	}
	
	
	protected static void __hx_ctor__Main(global::Main __hx_this) {
	}
	
	
	public static global::Bencher bench;
	
	public static int intMax;
	
	public static int floatMin;
	
	public static int floatMax;
	
	public static int trigMax;
	
	public static void main() {
		unchecked {
			global::Main.bench = new global::Bencher();
			string benchname = global::haxe.lang.Runtime.toString(global::Sys.args()[0]);
			int wamrup = default(int);
			if (( global::haxe.lang.Runtime.toString(global::Sys.args()[1]) != null )) {
				wamrup = (global::Std.parseInt(global::haxe.lang.Runtime.toString(global::Sys.args()[1]))).@value;
			}
			else {
				wamrup = 5;
			}
			
			int execution = (global::Std.parseInt(global::haxe.lang.Runtime.toString(global::Sys.args()[2]))).@value;
			if (( global::haxe.lang.Runtime.toString(global::Sys.args()[2]) != null )) {
				global::Std.parseInt(global::haxe.lang.Runtime.toString(global::Sys.args()[2]));
			}
			else {
				execution = 50;
			}
			
			if (( benchname != null )) {
				if (( benchname == "intArithmetic" )) {
					global::Main.__intArithmetic(wamrup, execution);
				}
				else if (( benchname == "doubleArithmetic" )) {
					global::Main.__doubleArithmetic(wamrup, execution);
				}
				else if (( benchname == "trig" )) {
					global::Main.__trig(wamrup, execution);
				}
				else {
					global::haxe.Log.trace.__hx_invoke2_o(default(double), "error module not found ", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"main", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (32) )}));
				}
				
			}
			else {
				global::Main.__intArithmetic(wamrup, execution);
				global::Main.__doubleArithmetic(wamrup, execution);
				global::Main.__trig(wamrup, execution);
			}
			
		}
	}
	
	
	public static void __intArithmetic(int wamrup, int execution) {
		unchecked {
			int i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "--++beginwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__intArithmetic", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (43) )}));
			while (( i < wamrup )) {
				global::Main.bench.intArithmetic(global::Main.intMax);
				 ++ i;
			}
			
			i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "++--endwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__intArithmetic", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (49) )}));
			while (( i < execution )) {
				global::Main.bench.intArithmetic(global::Main.intMax);
				 ++ i;
			}
			
		}
	}
	
	
	public static void __doubleArithmetic(int wamrup, int execution) {
		unchecked {
			int i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "--++beginwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__doubleArithmetic", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (58) )}));
			while (( i < wamrup )) {
				global::Main.bench.doubleArithmetic(global::Main.floatMin, global::Main.floatMax);
				 ++ i;
			}
			
			i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "++--endwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__doubleArithmetic", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (64) )}));
			while (( i < execution )) {
				global::Main.bench.doubleArithmetic(global::Main.floatMin, global::Main.floatMax);
				 ++ i;
			}
			
		}
	}
	
	
	public static void __trig(int wamrup, int execution) {
		unchecked {
			int i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "--++beginwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__trig", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (73) )}));
			while (( i < wamrup )) {
				global::Main.bench.trig(global::Main.trigMax);
				 ++ i;
			}
			
			i = 0;
			global::haxe.Log.trace.__hx_invoke2_o(default(double), "++--endwarmup", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"__trig", "Main", "Main.hx"}, new int[]{1981972957}, new double[]{((double) (79) )}));
			while (( i < execution )) {
				global::Main.bench.trig(global::Main.trigMax);
				 ++ i;
			}
			
		}
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Bencher : global::haxe.lang.HxObject {
	
	public Bencher(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Bencher() {
		global::Bencher.__hx_ctor__Bencher(this);
	}
	
	
	protected static void __hx_ctor__Bencher(global::Bencher __hx_this) {
	}
	
	
	public virtual void intArithmetic(int intMax) {
		unchecked {
			int intResult = 1;
			int myIterator_min = 0;
			int myIterator_max = intMax;
			while (( myIterator_min < myIterator_max )) {
				int i = myIterator_min++;
				intResult -= i;
				 ++ i;
				intResult += i;
				 ++ i;
				intResult *= i;
				 ++ i;
				intResult = ( intResult / i );
				 ++ i;
			}
			
		}
	}
	
	
	public virtual void doubleArithmetic(int floatMin, int floatMax) {
		double floatResult = ((double) (floatMin) );
		int myIterator_min = floatMin;
		int myIterator_max = floatMax;
		while (( myIterator_min < myIterator_max )) {
			int i = myIterator_min++;
			floatResult -= ((double) (i) );
			 ++ i;
			floatResult += ((double) (i) );
			 ++ i;
			floatResult *= ((double) (i) );
			 ++ i;
			floatResult /= ((double) (i) );
			 ++ i;
		}
		
	}
	
	
	public virtual void trig(int trigMax) {
		unchecked {
			double sine = 0.0;
			double cosine = 0.0;
			double tangent = 0.0;
			double logarithm = 0.0;
			double squareRoot = 0.0;
			int i = 1;
			while (( i < trigMax )) {
				sine = global::System.Math.Sin(((double) (i) ));
				cosine = global::System.Math.Cos(((double) (i) ));
				tangent = global::System.Math.Tan(((double) (i) ));
				logarithm = global::System.Math.Log(((double) (i) ));
				squareRoot = global::System.Math.Sqrt(((double) (i) ));
				 ++ i;
			}
			
		}
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			switch (hash) {
				case 1292082396:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "trig", 1292082396)) );
				}
				
				
				case 1410173467:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "doubleArithmetic", 1410173467)) );
				}
				
				
				case 1807134073:
				{
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "intArithmetic", 1807134073)) );
				}
				
				
				default:
				{
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
	}
	
	
	public override object __hx_invokeField(string field, int hash, object[] dynargs) {
		unchecked {
			switch (hash) {
				case 1292082396:
				{
					this.trig(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					break;
				}
				
				
				case 1410173467:
				{
					this.doubleArithmetic(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					break;
				}
				
				
				case 1807134073:
				{
					this.intArithmetic(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					break;
				}
				
				
				default:
				{
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			return null;
		}
	}
	
	
}


