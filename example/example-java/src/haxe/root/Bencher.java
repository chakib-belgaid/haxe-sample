// Generated by Haxe 4.0.0-preview.5
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Bencher extends haxe.lang.HxObject
{
	public Bencher(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Bencher()
	{
		//line 93 "/data/Main.hx"
		haxe.root.Bencher.__hx_ctor__Bencher(this);
	}
	
	
	protected static void __hx_ctor__Bencher(haxe.root.Bencher __hx_this)
	{
	}
	
	
	public void intArithmetic(int intMax)
	{
		//line 98 "/data/Main.hx"
		int intResult = 1;
		//line 100 "/data/Main.hx"
		int myIterator_min = 0;
		//line 100 "/data/Main.hx"
		int myIterator_max = intMax;
		//line 101 "/data/Main.hx"
		while (( myIterator_min < myIterator_max ))
		{
			//line 101 "/data/Main.hx"
			int i = myIterator_min++;
			//line 102 "/data/Main.hx"
			intResult -= i;
			//line 103 "/data/Main.hx"
			 ++ i;
			//line 104 "/data/Main.hx"
			intResult += i;
			//line 105 "/data/Main.hx"
			 ++ i;
			//line 106 "/data/Main.hx"
			intResult *= i;
			//line 107 "/data/Main.hx"
			 ++ i;
			//line 108 "/data/Main.hx"
			intResult = ((int) (( intResult / i )) );
			//line 109 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
	public void doubleArithmetic(int floatMin, int floatMax)
	{
		//line 116 "/data/Main.hx"
		double floatResult = ((double) (floatMin) );
		//line 118 "/data/Main.hx"
		int myIterator_min = floatMin;
		//line 118 "/data/Main.hx"
		int myIterator_max = floatMax;
		//line 119 "/data/Main.hx"
		while (( myIterator_min < myIterator_max ))
		{
			//line 119 "/data/Main.hx"
			int i = myIterator_min++;
			//line 120 "/data/Main.hx"
			floatResult -= ((double) (i) );
			//line 121 "/data/Main.hx"
			 ++ i;
			//line 122 "/data/Main.hx"
			floatResult += ((double) (i) );
			//line 123 "/data/Main.hx"
			 ++ i;
			//line 124 "/data/Main.hx"
			floatResult *= ((double) (i) );
			//line 125 "/data/Main.hx"
			 ++ i;
			//line 126 "/data/Main.hx"
			floatResult /= ((double) (i) );
			//line 127 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
	public void trig(int trigMax)
	{
		//line 135 "/data/Main.hx"
		double sine = 0.0;
		//line 136 "/data/Main.hx"
		double cosine = 0.0;
		//line 137 "/data/Main.hx"
		double tangent = 0.0;
		//line 138 "/data/Main.hx"
		double logarithm = 0.0;
		//line 139 "/data/Main.hx"
		double squareRoot = 0.0;
		//line 140 "/data/Main.hx"
		int i = 1;
		//line 141 "/data/Main.hx"
		while (( i < trigMax ))
		{
			//line 142 "/data/Main.hx"
			sine = java.lang.Math.sin(((double) (i) ));
			//line 143 "/data/Main.hx"
			cosine = java.lang.Math.cos(((double) (i) ));
			//line 144 "/data/Main.hx"
			tangent = java.lang.Math.tan(((double) (i) ));
			//line 145 "/data/Main.hx"
			logarithm = java.lang.Math.log(((double) (i) ));
			//line 146 "/data/Main.hx"
			squareRoot = java.lang.Math.sqrt(((double) (i) ));
			//line 147 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 91 "/data/Main.hx"
		{
			//line 91 "/data/Main.hx"
			boolean __temp_executeDef1 = true;
			//line 91 "/data/Main.hx"
			switch (field.hashCode())
			{
				case 3568668:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("trig")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "trig")) );
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
				case -232206855:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("intArithmetic")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "intArithmetic")) );
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
				case -247152805:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("doubleArithmetic")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "doubleArithmetic")) );
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
			}
			
			//line 91 "/data/Main.hx"
			if (__temp_executeDef1) 
			{
				//line 91 "/data/Main.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 91 "/data/Main.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 91 "/data/Main.hx"
		{
			//line 91 "/data/Main.hx"
			boolean __temp_executeDef1 = true;
			//line 91 "/data/Main.hx"
			switch (field.hashCode())
			{
				case 3568668:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("trig")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						this.trig(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
				case -232206855:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("intArithmetic")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						this.intArithmetic(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
				case -247152805:
				{
					//line 91 "/data/Main.hx"
					if (field.equals("doubleArithmetic")) 
					{
						//line 91 "/data/Main.hx"
						__temp_executeDef1 = false;
						//line 91 "/data/Main.hx"
						this.doubleArithmetic(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					//line 91 "/data/Main.hx"
					break;
				}
				
				
			}
			
			//line 91 "/data/Main.hx"
			if (__temp_executeDef1) 
			{
				//line 91 "/data/Main.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 91 "/data/Main.hx"
		return null;
	}
	
	
}


