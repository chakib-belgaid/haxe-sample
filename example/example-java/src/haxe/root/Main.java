// Generated by Haxe 4.0.0-preview.5
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Main extends haxe.lang.HxObject
{
	public static void main(String[] args)
	{
		Sys._args = args;
		{
			//line 1 "?"
			haxe.root.Main.main();
		}
	}
	
	static
	{
		//line 8 "/data/Main.hx"
		haxe.root.Main.intMax = 50000000;
		//line 9 "/data/Main.hx"
		haxe.root.Main.floatMin = -25000000;
		//line 10 "/data/Main.hx"
		haxe.root.Main.floatMax = 25000000;
		//line 11 "/data/Main.hx"
		haxe.root.Main.trigMax = 50000;
	}
	
	public Main(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Main()
	{
		//line 3 "/data/Main.hx"
		haxe.root.Main.__hx_ctor__Main(this);
	}
	
	
	protected static void __hx_ctor__Main(haxe.root.Main __hx_this)
	{
	}
	
	
	public static haxe.root.Bencher bench;
	
	public static int intMax;
	
	public static int floatMin;
	
	public static int floatMax;
	
	public static int trigMax;
	
	public static void main()
	{
		//line 17 "/data/Main.hx"
		haxe.root.Main.bench = new haxe.root.Bencher();
		//line 18 "/data/Main.hx"
		java.lang.String benchname = haxe.root.Sys.args().__get(0);
		//line 19 "/data/Main.hx"
		int wamrup = 0;
		//line 20 "/data/Main.hx"
		if (( haxe.root.Sys.args().__get(1) != null )) 
		{
			//line 20 "/data/Main.hx"
			wamrup = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(haxe.root.Sys.args().__get(1)))) );
		}
		else
		{
			//line 20 "/data/Main.hx"
			wamrup = 5;
		}
		
		//line 21 "/data/Main.hx"
		int execution = ((int) (haxe.lang.Runtime.toInt(haxe.root.Std.parseInt(haxe.root.Sys.args().__get(2)))) );
		//line 22 "/data/Main.hx"
		if (( haxe.root.Sys.args().__get(2) != null )) 
		{
			//line 22 "/data/Main.hx"
			haxe.root.Std.parseInt(haxe.root.Sys.args().__get(2));
		}
		else
		{
			//line 22 "/data/Main.hx"
			execution = 50;
		}
		
		//line 24 "/data/Main.hx"
		if (( benchname != null )) 
		{
			//line 25 "/data/Main.hx"
			if (haxe.lang.Runtime.valEq(benchname, "intArithmetic")) 
			{
				//line 26 "/data/Main.hx"
				haxe.root.Main.__intArithmetic(wamrup, execution);
			}
			else
			{
				//line 27 "/data/Main.hx"
				if (haxe.lang.Runtime.valEq(benchname, "doubleArithmetic")) 
				{
					//line 28 "/data/Main.hx"
					haxe.root.Main.__doubleArithmetic(wamrup, execution);
				}
				else
				{
					//line 29 "/data/Main.hx"
					if (haxe.lang.Runtime.valEq(benchname, "trig")) 
					{
						//line 30 "/data/Main.hx"
						haxe.root.Main.__trig(wamrup, execution);
					}
					else
					{
						//line 32 "/data/Main.hx"
						haxe.Log.trace.__hx_invoke2_o(0.0, "error module not found ", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "main"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (32) )) )}));
					}
					
				}
				
			}
			
		}
		else
		{
			//line 34 "/data/Main.hx"
			haxe.root.Main.__intArithmetic(wamrup, execution);
			//line 35 "/data/Main.hx"
			haxe.root.Main.__doubleArithmetic(wamrup, execution);
			//line 36 "/data/Main.hx"
			haxe.root.Main.__trig(wamrup, execution);
		}
		
	}
	
	
	public static void __intArithmetic(int wamrup, int execution)
	{
		//line 42 "/data/Main.hx"
		int i = 0;
		//line 43 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "--++beginwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__intArithmetic"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (43) )) )}));
		//line 44 "/data/Main.hx"
		while (( i < wamrup ))
		{
			//line 45 "/data/Main.hx"
			haxe.root.Main.bench.intArithmetic(haxe.root.Main.intMax);
			//line 46 "/data/Main.hx"
			 ++ i;
		}
		
		//line 48 "/data/Main.hx"
		i = 0;
		//line 49 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "++--endwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__intArithmetic"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (49) )) )}));
		//line 50 "/data/Main.hx"
		while (( i < execution ))
		{
			//line 51 "/data/Main.hx"
			haxe.root.Main.bench.intArithmetic(haxe.root.Main.intMax);
			//line 52 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
	public static void __doubleArithmetic(int wamrup, int execution)
	{
		//line 57 "/data/Main.hx"
		int i = 0;
		//line 58 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "--++beginwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__doubleArithmetic"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (58) )) )}));
		//line 59 "/data/Main.hx"
		while (( i < wamrup ))
		{
			//line 60 "/data/Main.hx"
			haxe.root.Main.bench.doubleArithmetic(haxe.root.Main.floatMin, haxe.root.Main.floatMax);
			//line 61 "/data/Main.hx"
			 ++ i;
		}
		
		//line 63 "/data/Main.hx"
		i = 0;
		//line 64 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "++--endwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__doubleArithmetic"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (64) )) )}));
		//line 65 "/data/Main.hx"
		while (( i < execution ))
		{
			//line 66 "/data/Main.hx"
			haxe.root.Main.bench.doubleArithmetic(haxe.root.Main.floatMin, haxe.root.Main.floatMax);
			//line 67 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
	public static void __trig(int wamrup, int execution)
	{
		//line 72 "/data/Main.hx"
		int i = 0;
		//line 73 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "--++beginwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__trig"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (73) )) )}));
		//line 74 "/data/Main.hx"
		while (( i < wamrup ))
		{
			//line 75 "/data/Main.hx"
			haxe.root.Main.bench.trig(haxe.root.Main.trigMax);
			//line 76 "/data/Main.hx"
			 ++ i;
		}
		
		//line 78 "/data/Main.hx"
		i = 0;
		//line 79 "/data/Main.hx"
		haxe.Log.trace.__hx_invoke2_o(0.0, "++--endwarmup", 0.0, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"Main", "Main.hx", "__trig"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (79) )) )}));
		//line 80 "/data/Main.hx"
		while (( i < execution ))
		{
			//line 81 "/data/Main.hx"
			haxe.root.Main.bench.trig(haxe.root.Main.trigMax);
			//line 82 "/data/Main.hx"
			 ++ i;
		}
		
	}
	
	
}


