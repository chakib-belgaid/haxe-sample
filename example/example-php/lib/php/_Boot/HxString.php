<?php
/**
 * Generated by Haxe 4.0.0-preview.5
 */

namespace php\_Boot;

use \php\Boot;

/**
 * `String` implementation
 */
class HxString {
	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return string
	 */
	static public function charAt ($str, $index) {
		#/usr/local/share/haxe/std/php/Boot.hx:695: characters 10-58
		if ($index < 0) {
			#/usr/local/share/haxe/std/php/Boot.hx:695: characters 22-24
			return "";
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:695: characters 27-58
			return mb_substr($str, $index, 1);
		}
	}

	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($str, $index) {
		#/usr/local/share/haxe/std/php/Boot.hx:699: lines 699-701
		if (($index < 0) || ($str === "")) {
			#/usr/local/share/haxe/std/php/Boot.hx:700: characters 4-15
			return null;
		}
		#/usr/local/share/haxe/std/php/Boot.hx:702: lines 702-704
		if ($index === 0) {
			#/usr/local/share/haxe/std/php/Boot.hx:703: characters 11-30
			$code = ord($str[0]);
			if ($code < 192) {
				return $code;
			} else if ($code < 224) {
				return (($code - 192) << 6) + ord($str[1]) - 128;
			} else if ($code < 240) {
				return (($code - 224) << 12) + ((ord($str[1]) - 128) << 6) + ord($str[2]) - 128;
			} else {
				return (($code - 240) << 18) + ((ord($str[1]) - 128) << 12) + ((ord($str[2]) - 128) << 6) + ord($str[3]) - 128;
			}
		}
		#/usr/local/share/haxe/std/php/Boot.hx:705: characters 3-46
		$char = mb_substr($str, $index, 1);
		#/usr/local/share/haxe/std/php/Boot.hx:706: characters 10-50
		if ($char === "") {
			#/usr/local/share/haxe/std/php/Boot.hx:706: characters 23-27
			return null;
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:706: characters 30-50
			$code1 = ord($char[0]);
			if ($code1 < 192) {
				return $code1;
			} else if ($code1 < 224) {
				return (($code1 - 192) << 6) + ord($char[1]) - 128;
			} else if ($code1 < 240) {
				return (($code1 - 224) << 12) + ((ord($char[1]) - 128) << 6) + ord($char[2]) - 128;
			} else {
				return (($code1 - 240) << 18) + ((ord($char[1]) - 128) << 12) + ((ord($char[2]) - 128) << 6) + ord($char[3]) - 128;
			}
		}
	}

	/**
	 * @param int $code
	 * 
	 * @return string
	 */
	static public function fromCharCode ($code) {
		#/usr/local/share/haxe/std/php/Boot.hx:776: characters 3-29
		return mb_chr($code);
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function indexOf ($str, $search, $startIndex = null) {
		#/usr/local/share/haxe/std/php/Boot.hx:710: lines 710-714
		if ($startIndex === null) {
			#/usr/local/share/haxe/std/php/Boot.hx:711: characters 4-18
			$startIndex = 0;
		} else if (($startIndex < 0) && (PHP_VERSION_ID < 70100)) {
			#/usr/local/share/haxe/std/php/Boot.hx:713: characters 4-28
			$startIndex += mb_strlen($str);
		}
		#/usr/local/share/haxe/std/php/Boot.hx:715: characters 3-57
		$index = mb_strpos($str, $search, $startIndex);
		#/usr/local/share/haxe/std/php/Boot.hx:716: characters 10-39
		if ($index === false) {
			#/usr/local/share/haxe/std/php/Boot.hx:716: characters 28-30
			return -1;
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:716: characters 33-38
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function lastIndexOf ($str, $search, $startIndex = null) {
		#/usr/local/share/haxe/std/php/Boot.hx:720: lines 720-727
		if ($startIndex === null) {
			#/usr/local/share/haxe/std/php/Boot.hx:721: characters 4-18
			$startIndex = 0;
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:723: characters 4-40
			$startIndex -= mb_strlen($str);
			#/usr/local/share/haxe/std/php/Boot.hx:724: lines 724-726
			if ($startIndex > 0) {
				#/usr/local/share/haxe/std/php/Boot.hx:725: characters 5-19
				$startIndex = 0;
			}
		}
		#/usr/local/share/haxe/std/php/Boot.hx:728: characters 3-58
		$index = mb_strrpos($str, $search, $startIndex);
		#/usr/local/share/haxe/std/php/Boot.hx:729: lines 729-733
		if ($index === false) {
			#/usr/local/share/haxe/std/php/Boot.hx:730: characters 4-13
			return -1;
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:732: characters 4-16
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $delimiter
	 * 
	 * @return \Array_hx
	 */
	static public function split ($str, $delimiter) {
		#/usr/local/share/haxe/std/php/Boot.hx:737: lines 737-742
		$arr = null;
		if ($delimiter === "") {
			$arr = preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);
		} else {
			#/usr/local/share/haxe/std/php/Boot.hx:740: characters 4-49
			$delimiter = preg_quote($delimiter, "/");
			#/usr/local/share/haxe/std/php/Boot.hx:737: lines 737-742
			$arr = preg_split("/" . ($delimiter??'null') . "/", $str);
		}
		#/usr/local/share/haxe/std/php/Boot.hx:743: characters 3-41
		return \Array_hx::wrap($arr);
	}

	/**
	 * @param string $str
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function substr ($str, $pos, $len = null) {
		#/usr/local/share/haxe/std/php/Boot.hx:747: characters 3-41
		return mb_substr($str, $pos, $len);
	}

	/**
	 * @param string $str
	 * @param int $startIndex
	 * @param int $endIndex
	 * 
	 * @return string
	 */
	static public function substring ($str, $startIndex, $endIndex = null) {
		#/usr/local/share/haxe/std/php/Boot.hx:751: lines 751-756
		if ($endIndex === null) {
			#/usr/local/share/haxe/std/php/Boot.hx:752: lines 752-754
			if ($startIndex < 0) {
				#/usr/local/share/haxe/std/php/Boot.hx:753: characters 5-19
				$startIndex = 0;
			}
			#/usr/local/share/haxe/std/php/Boot.hx:755: characters 4-44
			return mb_substr($str, $startIndex);
		}
		#/usr/local/share/haxe/std/php/Boot.hx:757: lines 757-759
		if ($endIndex < 0) {
			#/usr/local/share/haxe/std/php/Boot.hx:758: characters 4-16
			$endIndex = 0;
		}
		#/usr/local/share/haxe/std/php/Boot.hx:760: lines 760-762
		if ($startIndex < 0) {
			#/usr/local/share/haxe/std/php/Boot.hx:761: characters 4-18
			$startIndex = 0;
		}
		#/usr/local/share/haxe/std/php/Boot.hx:763: lines 763-767
		if ($startIndex > $endIndex) {
			#/usr/local/share/haxe/std/php/Boot.hx:764: characters 4-23
			$tmp = $endIndex;
			#/usr/local/share/haxe/std/php/Boot.hx:765: characters 4-25
			$endIndex = $startIndex;
			#/usr/local/share/haxe/std/php/Boot.hx:766: characters 4-20
			$startIndex = $tmp;
		}
		#/usr/local/share/haxe/std/php/Boot.hx:768: characters 3-66
		return mb_substr($str, $startIndex, $endIndex - $startIndex);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toLowerCase ($str) {
		#/usr/local/share/haxe/std/php/Boot.hx:691: characters 3-35
		return mb_strtolower($str);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toString ($str) {
		#/usr/local/share/haxe/std/php/Boot.hx:772: characters 3-13
		return $str;
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toUpperCase ($str) {
		#/usr/local/share/haxe/std/php/Boot.hx:687: characters 3-35
		return mb_strtoupper($str);
	}
}

Boot::registerClass(HxString::class, 'php._Boot.HxString');
