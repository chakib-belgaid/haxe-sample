<?php
/**
 * Generated by Haxe 4.0.0-preview.5
 */

use \php\Boot;
use \haxe\Log;
use \php\_Boot\HxAnon;

class Main {
	/**
	 * @var \Bencher
	 */
	static public $bench;
	/**
	 * @var int
	 */
	static public $floatMax = 25000000;
	/**
	 * @var int
	 */
	static public $floatMin = -25000000;
	/**
	 * @var int
	 */
	static public $intMax = 50000000;
	/**
	 * @var int
	 */
	static public $trigMax = 50000;

	/**
	 * @param int $wamrup
	 * @param int $execution
	 * 
	 * @return void
	 */
	static public function __doubleArithmetic ($wamrup, $execution) {
		#Main.hx:57: characters 7-20
		$i = 0;
		#Main.hx:58: characters 7-12
		(Log::$trace)("--++beginwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 58,
			"className" => "Main",
			"methodName" => "__doubleArithmetic",
		]));
		#Main.hx:59: lines 59-62
		while ($i < $wamrup) {
			#Main.hx:60: characters 9-65
			Main::$bench->doubleArithmetic(Main::$floatMin, Main::$floatMax);
			#Main.hx:61: characters 9-12
			++$i;
		}
		#Main.hx:63: characters 7-10
		$i = 0;
		#Main.hx:64: characters 7-12
		(Log::$trace)("++--endwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 64,
			"className" => "Main",
			"methodName" => "__doubleArithmetic",
		]));
		#Main.hx:65: lines 65-68
		while ($i < $execution) {
			#Main.hx:66: characters 9-65
			Main::$bench->doubleArithmetic(Main::$floatMin, Main::$floatMax);
			#Main.hx:67: characters 9-12
			++$i;
		}
	}

	/**
	 * @param int $wamrup
	 * @param int $execution
	 * 
	 * @return void
	 */
	static public function __intArithmetic ($wamrup, $execution) {
		#Main.hx:42: characters 7-20
		$i = 0;
		#Main.hx:43: characters 7-12
		(Log::$trace)("--++beginwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 43,
			"className" => "Main",
			"methodName" => "__intArithmetic",
		]));
		#Main.hx:44: lines 44-47
		while ($i < $wamrup) {
			#Main.hx:45: characters 9-46
			Main::$bench->intArithmetic(Main::$intMax);
			#Main.hx:46: characters 9-12
			++$i;
		}
		#Main.hx:48: characters 7-10
		$i = 0;
		#Main.hx:49: characters 7-12
		(Log::$trace)("++--endwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 49,
			"className" => "Main",
			"methodName" => "__intArithmetic",
		]));
		#Main.hx:50: lines 50-53
		while ($i < $execution) {
			#Main.hx:51: characters 9-46
			Main::$bench->intArithmetic(Main::$intMax);
			#Main.hx:52: characters 9-12
			++$i;
		}
	}

	/**
	 * @param int $wamrup
	 * @param int $execution
	 * 
	 * @return void
	 */
	static public function __trig ($wamrup, $execution) {
		#Main.hx:72: characters 7-20
		$i = 0;
		#Main.hx:73: characters 7-12
		(Log::$trace)("--++beginwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 73,
			"className" => "Main",
			"methodName" => "__trig",
		]));
		#Main.hx:74: lines 74-77
		while ($i < $wamrup) {
			#Main.hx:75: characters 9-38
			Main::$bench->trig(Main::$trigMax);
			#Main.hx:76: characters 9-12
			++$i;
		}
		#Main.hx:78: characters 7-10
		$i = 0;
		#Main.hx:79: characters 7-12
		(Log::$trace)("++--endwarmup", new HxAnon([
			"fileName" => "Main.hx",
			"lineNumber" => 79,
			"className" => "Main",
			"methodName" => "__trig",
		]));
		#Main.hx:80: lines 80-83
		while ($i < $execution) {
			#Main.hx:81: characters 9-38
			Main::$bench->trig(Main::$trigMax);
			#Main.hx:82: characters 9-12
			++$i;
		}
	}

	/**
	 * @return void
	 */
	static public function main () {
		#Main.hx:17: characters 5-26
		Main::$bench = new \Bencher();
		#Main.hx:18: characters 5-40
		$benchname = (\Sys::args()->arr[0] ?? null);
		#Main.hx:19: characters 5-21
		$wamrup = null;
		#Main.hx:20: characters 5-83
		if ((\Sys::args()->arr[1] ?? null) !== null) {
			#Main.hx:20: characters 31-67
			$wamrup = \Std::parseInt((\Sys::args()->arr[1] ?? null));
		} else {
			#Main.hx:20: characters 75-83
			$wamrup = 5;
		}
		#Main.hx:21: characters 5-51
		$execution = \Std::parseInt((\Sys::args()->arr[2] ?? null));
		#Main.hx:22: characters 5-91
		if ((\Sys::args()->arr[2] ?? null) !== null) {
			#Main.hx:22: characters 43-70
			\Std::parseInt((\Sys::args()->arr[2] ?? null));
		} else {
			#Main.hx:22: characters 79-91
			$execution = 50;
		}
		#Main.hx:24: lines 24-37
		if ($benchname !== null) {
			#Main.hx:25: lines 25-32
			if ($benchname === "intArithmetic") {
				#Main.hx:26: characters 9-42
				Main::__intArithmetic($wamrup, $execution);
			} else if ($benchname === "doubleArithmetic") {
				#Main.hx:28: characters 9-45
				Main::__doubleArithmetic($wamrup, $execution);
			} else if ($benchname === "trig") {
				#Main.hx:30: characters 9-33
				Main::__trig($wamrup, $execution);
			} else {
				#Main.hx:32: characters 9-14
				(Log::$trace)("error module not found ", new HxAnon([
					"fileName" => "Main.hx",
					"lineNumber" => 32,
					"className" => "Main",
					"methodName" => "main",
				]));
			}
		} else {
			#Main.hx:34: characters 7-40
			Main::__intArithmetic($wamrup, $execution);
			#Main.hx:35: characters 7-43
			Main::__doubleArithmetic($wamrup, $execution);
			#Main.hx:36: characters 7-31
			Main::__trig($wamrup, $execution);
		}
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(Main::class, 'Main');
